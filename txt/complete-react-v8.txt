Complete Intro to React, v8
  Setup & Tooling
    ESLint & Git Setup
    00:07:53: To pass some flag to the command that is defined in the scripts of package.json 
              you need to put a -- before the flag that you want to use. E.g. `npm run lint -- 
              --debug`
              https://frontendmasters.com/courses/complete-react-v8/eslint-git-setup?t=473
    
  Core React Concepts
    useState Hook
    00:02:40: When you type $0 in the browsers console, the currently selected DOM node is 
              returned
              https://frontendmasters.com/courses/complete-react-v8/usestate-hook?t=160
    
    00:03:46: for using a <label> tag in react note that the for attribute does not work. 
              Instead use htmlFor. Similar to className, as some words are reserved by JS.
              https://frontendmasters.com/courses/complete-react-v8/usestate-hook?t=226
    
    00:14:00: An absolutely key concept for you to grasp is hooks rely on strict ordering. As 
              such, do not put hooks inside if statements or loops. If you do, you'll have 
              insane bugs that involve useState returning the wrong state.
              https://frontendmasters.com/courses/complete-react-v8/usestate-hook?t=840
    
    Effects
    00:01:20: useEffect allows you to say do a render of this component first so the user can 
              see something then as soon as the render is done, then do something (the 
              something here being an effect)

Side effects can include data fetching, 
              subscriptions, manual DOM manipulations, and more.

Function Argument: The first 
              argument to useEffect is a function that contains the code for the side effect. 
              This function will be executed after the component is rendered.

Dependencies 
              Array: The second argument to useEffect is an optional array of dependencies. If 
              any of the values in this array change between renders, the effect function will 
              be re-executed. If the array is empty, the effect will only run once when the 
              component mounts, and it won't re-run for subsequent renders.
              https://frontendmasters.com/courses/complete-react-v8/effects?t=80
    
    useBreedList Custom Hook
    00:15:06: if you want to do async await inside of an effect you must create an async 
              function inside of the effect
              https://frontendmasters.com/courses/complete-react-v8/usebreedlist-custom-hook?t=906
    
    Component Composition
    00:00:14: Rule of thumb: Everytime you are rendering out a list of something (here pets) 
              it could be a good idea to extract a component out. Component files shouldn't 
              get too long (e.g. 300 lines is too long most times)
              https://frontendmasters.com/courses/complete-react-v8/component-composition?t=14
    
    00:05:21: In general its a better idea to type out the props that you need in a component 
              instead of using the spread operator as it is more explicit. 

Only when the 
              component is a complete "pass through" component you should use the spread 
              operator for the props.
              https://frontendmasters.com/courses/complete-react-v8/component-composition?t=321
    
    React Dev Tools
    00:03:00: With Strict Mode React informs you about upcoming changes in functionality. 
              

But it comes with the price that it renders everything twice
              https://frontendmasters.com/courses/complete-react-v8/react-dev-tools?t=180
    
  React Capabilities
    React Router
    00:10:33: When using React Router it is better to use Link Components instead of a tags in 
              order to prevent the whole page from refreshing
              https://frontendmasters.com/courses/complete-react-v8/react-router?t=633
    
    useParams
    00:00:27: with useParams it is possible to use the the parameters that you are using in 
              react router
              https://frontendmasters.com/courses/complete-react-v8/useparams?t=27
    
    React Query
    00:00:45: React Query is a relatively new feature. With react query it is possible to 
              replace a lot of useEffect() hooks in the code. Rule of thumb: Avoid useEffect 
              where you can because it is most complicated to understand.
              https://frontendmasters.com/courses/complete-react-v8/react-query?t=45
    
    00:07:00: To use React Query you need to define a query client 

```
const queryClient = 
              new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: Infinity, 
              // when to refetch
      cacheTime: Infinity, // when to delete cache
    },
  
              },
});
```

and wrap the App in `<QueryClientProvider client={queryClient}>`
              https://frontendmasters.com/courses/complete-react-v8/react-query?t=420
    
    Performance Optimization with React Query
    00:03:36: to use react query you need to use the `useQuery(<queryKey, queryFn>)` hook, 
              which takes two arguments:

1. queryKey: first value is string, second is key to 
              query

2. queryFn: async function where the query is defined which returns the 
              json of the query
              https://frontendmasters.com/courses/complete-react-v8/performance-optimization-with-react-query?t=216
    
    Refactoring fetchBreedList
    00:03:26: `results?.data?.breeds ?? []` -- explanation: if there are results, give me the 
              results, if not don't throw an error, but give me an empty array instead.
              https://frontendmasters.com/courses/complete-react-v8/refactoring-fetchbreedlist?t=206
    
    00:06:20: For POST, PUT there is the useMutation query available to React query.
              https://frontendmasters.com/courses/complete-react-v8/refactoring-fetchbreedlist?t=380
    
    Uncontrolled Forms
    00:09:07: DOM Sidenote: with new FormData(e.target) you hand over a form to the FormData 
              class and you can access the different elements of the form
              https://frontendmasters.com/courses/complete-react-v8/uncontrolled-forms?t=547
    
    Class Components
    00:12:18: Most of the time today function components are used over class components. 
              However class components are not deprecated. In some special cases it can be 
              still useful to use class components, e.g. when working with specialized 
              Lifecycle Methods like shouldComponentUpdate.
              https://frontendmasters.com/courses/complete-react-v8/class-components?t=738
    
    Handling Events in Class Components
    00:01:15: It is possible to disable a specific es-lint rule by commenting `// 
              eslint-disable-next-line` at the line before
              https://frontendmasters.com/courses/complete-react-v8/handling-events-in-class-components?t=75
    
    00:01:51: Arrow functions, unlike normal functions,  doesn't create a new scope at the 
              point of invocation
              https://frontendmasters.com/courses/complete-react-v8/handling-events-in-class-components?t=111
    
    00:04:02: data-* attributes allow us to store extra information on standard, semantic HTML 
              elements without other hacks such as non-standard attributes, or extra 
              properties on DOM.
              https://frontendmasters.com/courses/complete-react-v8/handling-events-in-class-components?t=242
    
    00:04:32: typecasting hack with unary plus: typeof +"10" - number
              https://frontendmasters.com/courses/complete-react-v8/handling-events-in-class-components?t=272
    
  Special Case React Tools
    Error Boundaries
    00:07:49: Typically you would log Errors to something like TrackJS or NEwRelic, Elastic 
              apm

At quantilope we are using elastic apm for error tracking
              https://frontendmasters.com/courses/complete-react-v8/error-boundaries?t=469
    
    00:08:59: Important when using ErrorBoundaries: ErrorBoundaries only catch errors of 
              components that are rendered inside of it. Meaning you can't just use it in the 
              function where you want to catch the error. Instead create another function that 
              has an ErrorBoundary component where the component you want to catch the error 
              from is rendered.
              https://frontendmasters.com/courses/complete-react-v8/error-boundaries?t=539
    
    Modals with Portals
    00:09:09: Everything that you return in a useEffect hook run after the component will 
              unmount from the DOM
              https://frontendmasters.com/courses/complete-react-v8/modals-with-portals?t=549
    
    00:12:48: Don't do `const elRef = useRef(document.createElement("div"))` because it would 
              run every time you use the Modal

Instead do 
```
  const elRef = useRef(null)
  
              if (!elRef.current) {
    elRef.current = document.createElement('div')
  
              }
```
This will only run `document.createElement()` once
              https://frontendmasters.com/courses/complete-react-v8/modals-with-portals?t=768
    
    00:12:48: Don't do `const elRef = useRef(document.createElement("div"))` because it would 
              run every time you use the Modal

Instead do 
```
  const elRef = useRef(null)
  
              if (!elRef.current) {
    elRef.current = document.createElement('div')
  
              }
```
This will only run `document.createElement()` once
              https://frontendmasters.com/courses/complete-react-v8/modals-with-portals?t=768
    
    Context Q&A
    00:02:00: The useNavigate hook is used to programmatically route the user somewhere
              https://frontendmasters.com/courses/complete-react-v8/context-q-a?t=120
    